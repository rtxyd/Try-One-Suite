
// // Visit the wiki for more info - https://kubejs.com/
// console.info('Hello, World! (Loaded server example script)')


// // 蓄力装备ID与参数配置
// const CHARGE_ITEM = 'eternal_starlight:energy_sword'; // 需要蓄力的物品
// const CHARGE_TIME = 60; // 蓄力所需时间（单位：tick，60 tick = 3秒）
// const DAMAGE_MULTIPLIER = 2.0; // 伤害倍数

// // 服务端逻辑
// const chargingPlayers = {};
// ClientE(event => {
//   const player = event.player;
//   const item = event.item;
  
//   if (item.id !== CHARGE_ITEM) return;

//   // 重置旧状态和任务
//   if (player.persistentData.contains('charged_attack')) {
//     player.persistentData.remove('charged_attack');
//   }
//   if (player.persistentData.contains('charge_task_id')) {
//     player.cancelTask(player.persistentData.get('charge_task_id'));
//     player.persistentData.remove('charge_task_id');
//   }

//   chargingPlayers[player.uuid] = {
//     startTime: player.level.getGameTime(),
//     isCharged: false
//   };
// });

// ItemEvents.(event => {
//   const player = event.player;
//   const uuid = player.uuid;
//   const data = chargingPlayers[uuid];
  
//   if (!data) return;
  
//   const elapsedTime = player.level.getGameTime() - data.startTime;
//   const isCharged = elapsedTime >= CHARGE_TIME;
  
//   if (isCharged) {
//     player.persistentData.put('charged_attack', true);
    
//     // 设置新任务并保存 ID
//     const taskId = player.schedule(200, () => {
//       player.persistentData.remove('charged_attack');
//       player.persistentData.remove('charge_task_id'); // 清理任务ID
//     });
//     player.persistentData.put('charge_task_id', taskId);
//   }
  
//   delete chargingPlayers[uuid];
// });

// PlayerEvents.loggedOut(event => {
//   const player = event.player;
//   player.persistentData.remove('charge_task_id');
// });

// // 攻击时应用伤害加成
// EntityEvents.beforeHurt(event => {
//   const { entity: target, source, amount } = event;
//   const attacker = source.getEntity();
  
//   // 检查攻击者是否为玩家且处于蓄力状态
//   if (attacker?.isPlayer() && attacker.persistentData.get('charged_attack')) {
//     event.amount = amount * DAMAGE_MULTIPLIER; // 修改伤害
//     attacker.persistentData.remove('charged_attack'); // 清除状态
    
//     // 向客户端发送粒子触发指令（自定义数据包）
//     attacker.sendData('charged_attack', {}); 
//   }
// });